// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TcpProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "../include/proto/TcpProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Person_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegistReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegistRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShakeMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShakeMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextMsgPrivate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextMsgPrivate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TextMsgGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TextMsgGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* TcpHeartBeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TcpHeartBeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TcpHeartBeatRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TcpHeartBeatRes_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TcpProto_2eproto() {
  protobuf_AddDesc_TcpProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TcpProto.proto");
  GOOGLE_CHECK(file != NULL);
  Person_descriptor_ = file->message_type(0);
  static const int Person_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, head_),
  };
  Person_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Person_descriptor_,
      Person::default_instance_,
      Person_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Person));
  RegistReq_descriptor_ = file->message_type(1);
  static const int RegistReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistReq, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistReq, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistReq, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistReq, head_),
  };
  RegistReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistReq_descriptor_,
      RegistReq::default_instance_,
      RegistReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistReq));
  RegistRes_descriptor_ = file->message_type(2);
  static const int RegistRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRes, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRes, id_),
  };
  RegistRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistRes_descriptor_,
      RegistRes::default_instance_,
      RegistRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistRes));
  LoginReq_descriptor_ = file->message_type(3);
  static const int LoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, password_),
  };
  LoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::default_instance_,
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReq));
  LoginRes_descriptor_ = file->message_type(4);
  static const int LoginRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, person_),
  };
  LoginRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRes_descriptor_,
      LoginRes::default_instance_,
      LoginRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRes));
  LogoutReq_descriptor_ = file->message_type(5);
  static const int LogoutReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, id_),
  };
  LogoutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutReq_descriptor_,
      LogoutReq::default_instance_,
      LogoutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutReq));
  LogoutRes_descriptor_ = file->message_type(6);
  static const int LogoutRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRes, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRes, person_),
  };
  LogoutRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutRes_descriptor_,
      LogoutRes::default_instance_,
      LogoutRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutRes));
  ShakeMsg_descriptor_ = file->message_type(7);
  static const int ShakeMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMsg, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMsg, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMsg, data_),
  };
  ShakeMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShakeMsg_descriptor_,
      ShakeMsg::default_instance_,
      ShakeMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShakeMsg));
  TextMsgPrivate_descriptor_ = file->message_type(8);
  static const int TextMsgPrivate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMsgPrivate, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMsgPrivate, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMsgPrivate, data_),
  };
  TextMsgPrivate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextMsgPrivate_descriptor_,
      TextMsgPrivate::default_instance_,
      TextMsgPrivate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMsgPrivate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMsgPrivate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextMsgPrivate));
  TextMsgGroup_descriptor_ = file->message_type(9);
  static const int TextMsgGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMsgGroup, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMsgGroup, data_),
  };
  TextMsgGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TextMsgGroup_descriptor_,
      TextMsgGroup::default_instance_,
      TextMsgGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMsgGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TextMsgGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TextMsgGroup));
  TcpHeartBeatReq_descriptor_ = file->message_type(10);
  static const int TcpHeartBeatReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpHeartBeatReq, data_),
  };
  TcpHeartBeatReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TcpHeartBeatReq_descriptor_,
      TcpHeartBeatReq::default_instance_,
      TcpHeartBeatReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpHeartBeatReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpHeartBeatReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TcpHeartBeatReq));
  TcpHeartBeatRes_descriptor_ = file->message_type(11);
  static const int TcpHeartBeatRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpHeartBeatRes, data_),
  };
  TcpHeartBeatRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TcpHeartBeatRes_descriptor_,
      TcpHeartBeatRes::default_instance_,
      TcpHeartBeatRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpHeartBeatRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TcpHeartBeatRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TcpHeartBeatRes));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TcpProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Person_descriptor_, &Person::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistReq_descriptor_, &RegistReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistRes_descriptor_, &RegistRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReq_descriptor_, &LoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRes_descriptor_, &LoginRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutReq_descriptor_, &LogoutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutRes_descriptor_, &LogoutRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShakeMsg_descriptor_, &ShakeMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextMsgPrivate_descriptor_, &TextMsgPrivate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TextMsgGroup_descriptor_, &TextMsgGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TcpHeartBeatReq_descriptor_, &TcpHeartBeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TcpHeartBeatRes_descriptor_, &TcpHeartBeatRes::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TcpProto_2eproto() {
  delete Person::default_instance_;
  delete Person_reflection_;
  delete RegistReq::default_instance_;
  delete RegistReq_reflection_;
  delete RegistRes::default_instance_;
  delete RegistRes_reflection_;
  delete LoginReq::default_instance_;
  delete LoginReq_reflection_;
  delete LoginRes::default_instance_;
  delete LoginRes_reflection_;
  delete LogoutReq::default_instance_;
  delete LogoutReq_reflection_;
  delete LogoutRes::default_instance_;
  delete LogoutRes_reflection_;
  delete ShakeMsg::default_instance_;
  delete ShakeMsg_reflection_;
  delete TextMsgPrivate::default_instance_;
  delete TextMsgPrivate_reflection_;
  delete TextMsgGroup::default_instance_;
  delete TextMsgGroup_reflection_;
  delete TcpHeartBeatReq::default_instance_;
  delete TcpHeartBeatReq_reflection_;
  delete TcpHeartBeatRes::default_instance_;
  delete TcpHeartBeatRes_reflection_;
}

void protobuf_AddDesc_TcpProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016TcpProto.proto\"S\n\006Person\022\n\n\002id\030\001 \002(\005\022\020"
    "\n\010nickname\030\002 \002(\t\022\020\n\010password\030\003 \002(\t\022\013\n\003se"
    "x\030\004 \002(\t\022\014\n\004head\030\005 \002(\005\"J\n\tRegistReq\022\020\n\010ni"
    "ckname\030\001 \002(\t\022\020\n\010password\030\002 \002(\t\022\013\n\003sex\030\003 "
    "\002(\t\022\014\n\004head\030\004 \002(\005\"%\n\tRegistRes\022\014\n\004code\030\001"
    " \002(\005\022\n\n\002id\030\002 \002(\005\"(\n\010LoginReq\022\n\n\002id\030\001 \002(\005"
    "\022\020\n\010password\030\002 \002(\t\"1\n\010LoginRes\022\014\n\004code\030\001"
    " \002(\005\022\027\n\006person\030\002 \003(\0132\007.Person\"\027\n\tLogoutR"
    "eq\022\n\n\002id\030\001 \002(\005\"2\n\tLogoutRes\022\014\n\004code\030\001 \002("
    "\005\022\027\n\006person\030\002 \002(\0132\007.Person\"2\n\010ShakeMsg\022\013"
    "\n\003src\030\001 \002(\005\022\013\n\003dst\030\002 \002(\005\022\014\n\004data\030\003 \002(\t\"8"
    "\n\016TextMsgPrivate\022\013\n\003src\030\001 \002(\005\022\013\n\003dst\030\002 \002"
    "(\005\022\014\n\004data\030\003 \002(\t\")\n\014TextMsgGroup\022\013\n\003src\030"
    "\001 \002(\005\022\014\n\004data\030\002 \002(\t\"\037\n\017TcpHeartBeatReq\022\014"
    "\n\004data\030\001 \002(\005\"\037\n\017TcpHeartBeatRes\022\014\n\004data\030"
    "\001 \002(\005", 605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TcpProto.proto", &protobuf_RegisterTypes);
  Person::default_instance_ = new Person();
  RegistReq::default_instance_ = new RegistReq();
  RegistRes::default_instance_ = new RegistRes();
  LoginReq::default_instance_ = new LoginReq();
  LoginRes::default_instance_ = new LoginRes();
  LogoutReq::default_instance_ = new LogoutReq();
  LogoutRes::default_instance_ = new LogoutRes();
  ShakeMsg::default_instance_ = new ShakeMsg();
  TextMsgPrivate::default_instance_ = new TextMsgPrivate();
  TextMsgGroup::default_instance_ = new TextMsgGroup();
  TcpHeartBeatReq::default_instance_ = new TcpHeartBeatReq();
  TcpHeartBeatRes::default_instance_ = new TcpHeartBeatRes();
  Person::default_instance_->InitAsDefaultInstance();
  RegistReq::default_instance_->InitAsDefaultInstance();
  RegistRes::default_instance_->InitAsDefaultInstance();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginRes::default_instance_->InitAsDefaultInstance();
  LogoutReq::default_instance_->InitAsDefaultInstance();
  LogoutRes::default_instance_->InitAsDefaultInstance();
  ShakeMsg::default_instance_->InitAsDefaultInstance();
  TextMsgPrivate::default_instance_->InitAsDefaultInstance();
  TextMsgGroup::default_instance_->InitAsDefaultInstance();
  TcpHeartBeatReq::default_instance_->InitAsDefaultInstance();
  TcpHeartBeatRes::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TcpProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TcpProto_2eproto {
  StaticDescriptorInitializer_TcpProto_2eproto() {
    protobuf_AddDesc_TcpProto_2eproto();
  }
} static_descriptor_initializer_TcpProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Person::kIdFieldNumber;
const int Person::kNicknameFieldNumber;
const int Person::kPasswordFieldNumber;
const int Person::kSexFieldNumber;
const int Person::kHeadFieldNumber;
#endif  // !_MSC_VER

Person::Person()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Person)
}

void Person::InitAsDefaultInstance() {
}

Person::Person(const Person& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Person)
}

void Person::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:Person)
  SharedDtor();
}

void Person::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (sex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sex_;
  }
  if (this != default_instance_) {
  }
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_descriptor_;
}

const Person& Person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

Person* Person::default_instance_ = NULL;

Person* Person::New() const {
  return new Person;
}

void Person::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Person*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, head_);
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_sex()) {
      if (sex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sex_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (tag == 18) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sex;
        break;
      }

      // required string sex = 4;
      case 4: {
        if (tag == 34) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sex().data(), this->sex().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sex");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_head;
        break;
      }

      // required int32 head = 5;
      case 5: {
        if (tag == 40) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Person)
  return false;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Person)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->nickname(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // required string sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sex(), output);
  }

  // required int32 head = 5;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Person)
}

::google::protobuf::uint8* Person::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Person)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // required string sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sex(), target);
  }

  // required int32 head = 5;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Person)
  return target;
}

int Person::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required string sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sex());
    }

    // required int32 head = 5;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Person* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Person*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Person::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Person::Swap(Person* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nickname_, other->nickname_);
    std::swap(password_, other->password_);
    std::swap(sex_, other->sex_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Person_descriptor_;
  metadata.reflection = Person_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegistReq::kNicknameFieldNumber;
const int RegistReq::kPasswordFieldNumber;
const int RegistReq::kSexFieldNumber;
const int RegistReq::kHeadFieldNumber;
#endif  // !_MSC_VER

RegistReq::RegistReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegistReq)
}

void RegistReq::InitAsDefaultInstance() {
}

RegistReq::RegistReq(const RegistReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RegistReq)
}

void RegistReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistReq::~RegistReq() {
  // @@protoc_insertion_point(destructor:RegistReq)
  SharedDtor();
}

void RegistReq::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete nickname_;
  }
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (sex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sex_;
  }
  if (this != default_instance_) {
  }
}

void RegistReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistReq_descriptor_;
}

const RegistReq& RegistReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

RegistReq* RegistReq::default_instance_ = NULL;

RegistReq* RegistReq::New() const {
  return new RegistReq;
}

void RegistReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        nickname_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_sex()) {
      if (sex_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sex_->clear();
      }
    }
    head_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegistReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nickname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "nickname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sex;
        break;
      }

      // required string sex = 3;
      case 3: {
        if (tag == 26) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sex().data(), this->sex().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sex");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_head;
        break;
      }

      // required int32 head = 4;
      case 4: {
        if (tag == 32) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegistReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegistReq)
  return false;
#undef DO_
}

void RegistReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegistReq)
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nickname(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // required string sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sex");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sex(), output);
  }

  // required int32 head = 4;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->head(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegistReq)
}

::google::protobuf::uint8* RegistReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegistReq)
  // required string nickname = 1;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nickname(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required string sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sex().data(), this->sex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sex");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sex(), target);
  }

  // required int32 head = 4;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->head(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegistReq)
  return target;
}

int RegistReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nickname = 1;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required string sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sex());
    }

    // required int32 head = 4;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistReq::MergeFrom(const RegistReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistReq::CopyFrom(const RegistReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RegistReq::Swap(RegistReq* other) {
  if (other != this) {
    std::swap(nickname_, other->nickname_);
    std::swap(password_, other->password_);
    std::swap(sex_, other->sex_);
    std::swap(head_, other->head_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistReq_descriptor_;
  metadata.reflection = RegistReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegistRes::kCodeFieldNumber;
const int RegistRes::kIdFieldNumber;
#endif  // !_MSC_VER

RegistRes::RegistRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RegistRes)
}

void RegistRes::InitAsDefaultInstance() {
}

RegistRes::RegistRes(const RegistRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RegistRes)
}

void RegistRes::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistRes::~RegistRes() {
  // @@protoc_insertion_point(destructor:RegistRes)
  SharedDtor();
}

void RegistRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegistRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistRes_descriptor_;
}

const RegistRes& RegistRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

RegistRes* RegistRes::default_instance_ = NULL;

RegistRes* RegistRes::New() const {
  return new RegistRes;
}

void RegistRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegistRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(code_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RegistRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RegistRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RegistRes)
  return false;
#undef DO_
}

void RegistRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RegistRes)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RegistRes)
}

::google::protobuf::uint8* RegistRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegistRes)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegistRes)
  return target;
}

int RegistRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistRes::MergeFrom(const RegistRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistRes::CopyFrom(const RegistRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RegistRes::Swap(RegistRes* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistRes_descriptor_;
  metadata.reflection = RegistRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginReq::kIdFieldNumber;
const int LoginReq::kPasswordFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginReq)
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginReq)
}

void LoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  // @@protoc_insertion_point(destructor:LoginReq)
  SharedDtor();
}

void LoginReq::SharedDtor() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginReq)
  return false;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginReq)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginReq)
}

::google::protobuf::uint8* LoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginReq)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginReq)
  return target;
}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRes::kCodeFieldNumber;
const int LoginRes::kPersonFieldNumber;
#endif  // !_MSC_VER

LoginRes::LoginRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LoginRes)
}

void LoginRes::InitAsDefaultInstance() {
}

LoginRes::LoginRes(const LoginRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LoginRes)
}

void LoginRes::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRes::~LoginRes() {
  // @@protoc_insertion_point(destructor:LoginRes)
  SharedDtor();
}

void LoginRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRes_descriptor_;
}

const LoginRes& LoginRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

LoginRes* LoginRes::default_instance_ = NULL;

LoginRes* LoginRes::New() const {
  return new LoginRes;
}

void LoginRes::Clear() {
  code_ = 0;
  person_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LoginRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_person;
        break;
      }

      // repeated .Person person = 2;
      case 2: {
        if (tag == 18) {
         parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_person;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LoginRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LoginRes)
  return false;
#undef DO_
}

void LoginRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LoginRes)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // repeated .Person person = 2;
  for (int i = 0; i < this->person_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->person(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LoginRes)
}

::google::protobuf::uint8* LoginRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LoginRes)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // repeated .Person person = 2;
  for (int i = 0; i < this->person_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->person(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LoginRes)
  return target;
}

int LoginRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  // repeated .Person person = 2;
  total_size += 1 * this->person_size();
  for (int i = 0; i < this->person_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->person(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRes::MergeFrom(const LoginRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  person_.MergeFrom(from.person_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRes::CopyFrom(const LoginRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->person())) return false;
  return true;
}

void LoginRes::Swap(LoginRes* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    person_.Swap(&other->person_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRes_descriptor_;
  metadata.reflection = LoginRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutReq::kIdFieldNumber;
#endif  // !_MSC_VER

LogoutReq::LogoutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogoutReq)
}

void LogoutReq::InitAsDefaultInstance() {
}

LogoutReq::LogoutReq(const LogoutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogoutReq)
}

void LogoutReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutReq::~LogoutReq() {
  // @@protoc_insertion_point(destructor:LogoutReq)
  SharedDtor();
}

void LogoutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutReq_descriptor_;
}

const LogoutReq& LogoutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

LogoutReq* LogoutReq::default_instance_ = NULL;

LogoutReq* LogoutReq::New() const {
  return new LogoutReq;
}

void LogoutReq::Clear() {
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogoutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogoutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogoutReq)
  return false;
#undef DO_
}

void LogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogoutReq)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogoutReq)
}

::google::protobuf::uint8* LogoutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogoutReq)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogoutReq)
  return target;
}

int LogoutReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutReq::MergeFrom(const LogoutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutReq::CopyFrom(const LogoutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LogoutReq::Swap(LogoutReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutReq_descriptor_;
  metadata.reflection = LogoutReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutRes::kCodeFieldNumber;
const int LogoutRes::kPersonFieldNumber;
#endif  // !_MSC_VER

LogoutRes::LogoutRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogoutRes)
}

void LogoutRes::InitAsDefaultInstance() {
  person_ = const_cast< ::Person*>(&::Person::default_instance());
}

LogoutRes::LogoutRes(const LogoutRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LogoutRes)
}

void LogoutRes::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  person_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutRes::~LogoutRes() {
  // @@protoc_insertion_point(destructor:LogoutRes)
  SharedDtor();
}

void LogoutRes::SharedDtor() {
  if (this != default_instance_) {
    delete person_;
  }
}

void LogoutRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutRes_descriptor_;
}

const LogoutRes& LogoutRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

LogoutRes* LogoutRes::default_instance_ = NULL;

LogoutRes* LogoutRes::New() const {
  return new LogoutRes;
}

void LogoutRes::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    code_ = 0;
    if (has_person()) {
      if (person_ != NULL) person_->::Person::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LogoutRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_person;
        break;
      }

      // required .Person person = 2;
      case 2: {
        if (tag == 18) {
         parse_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LogoutRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LogoutRes)
  return false;
#undef DO_
}

void LogoutRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LogoutRes)
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // required .Person person = 2;
  if (has_person()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->person(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LogoutRes)
}

::google::protobuf::uint8* LogoutRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogoutRes)
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // required .Person person = 2;
  if (has_person()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->person(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogoutRes)
  return target;
}

int LogoutRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required .Person person = 2;
    if (has_person()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->person());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutRes::MergeFrom(const LogoutRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_person()) {
      mutable_person()->::Person::MergeFrom(from.person());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutRes::CopyFrom(const LogoutRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_person()) {
    if (!this->person().IsInitialized()) return false;
  }
  return true;
}

void LogoutRes::Swap(LogoutRes* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(person_, other->person_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutRes_descriptor_;
  metadata.reflection = LogoutRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShakeMsg::kSrcFieldNumber;
const int ShakeMsg::kDstFieldNumber;
const int ShakeMsg::kDataFieldNumber;
#endif  // !_MSC_VER

ShakeMsg::ShakeMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ShakeMsg)
}

void ShakeMsg::InitAsDefaultInstance() {
}

ShakeMsg::ShakeMsg(const ShakeMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ShakeMsg)
}

void ShakeMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_ = 0;
  dst_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShakeMsg::~ShakeMsg() {
  // @@protoc_insertion_point(destructor:ShakeMsg)
  SharedDtor();
}

void ShakeMsg::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ShakeMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShakeMsg_descriptor_;
}

const ShakeMsg& ShakeMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

ShakeMsg* ShakeMsg::default_instance_ = NULL;

ShakeMsg* ShakeMsg::New() const {
  return new ShakeMsg;
}

void ShakeMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShakeMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(src_, dst_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShakeMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ShakeMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 src = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dst;
        break;
      }

      // required int32 dst = 2;
      case 2: {
        if (tag == 16) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ShakeMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ShakeMsg)
  return false;
#undef DO_
}

void ShakeMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ShakeMsg)
  // required int32 src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src(), output);
  }

  // required int32 dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst(), output);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ShakeMsg)
}

::google::protobuf::uint8* ShakeMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ShakeMsg)
  // required int32 src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src(), target);
  }

  // required int32 dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst(), target);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ShakeMsg)
  return target;
}

int ShakeMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src());
    }

    // required int32 dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst());
    }

    // required string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShakeMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShakeMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShakeMsg::MergeFrom(const ShakeMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShakeMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeMsg::CopyFrom(const ShakeMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ShakeMsg::Swap(ShakeMsg* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShakeMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShakeMsg_descriptor_;
  metadata.reflection = ShakeMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TextMsgPrivate::kSrcFieldNumber;
const int TextMsgPrivate::kDstFieldNumber;
const int TextMsgPrivate::kDataFieldNumber;
#endif  // !_MSC_VER

TextMsgPrivate::TextMsgPrivate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TextMsgPrivate)
}

void TextMsgPrivate::InitAsDefaultInstance() {
}

TextMsgPrivate::TextMsgPrivate(const TextMsgPrivate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TextMsgPrivate)
}

void TextMsgPrivate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_ = 0;
  dst_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextMsgPrivate::~TextMsgPrivate() {
  // @@protoc_insertion_point(destructor:TextMsgPrivate)
  SharedDtor();
}

void TextMsgPrivate::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TextMsgPrivate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextMsgPrivate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextMsgPrivate_descriptor_;
}

const TextMsgPrivate& TextMsgPrivate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

TextMsgPrivate* TextMsgPrivate::default_instance_ = NULL;

TextMsgPrivate* TextMsgPrivate::New() const {
  return new TextMsgPrivate;
}

void TextMsgPrivate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TextMsgPrivate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(src_, dst_);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextMsgPrivate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TextMsgPrivate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 src = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dst;
        break;
      }

      // required int32 dst = 2;
      case 2: {
        if (tag == 16) {
         parse_dst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_)));
          set_has_dst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TextMsgPrivate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TextMsgPrivate)
  return false;
#undef DO_
}

void TextMsgPrivate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TextMsgPrivate)
  // required int32 src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src(), output);
  }

  // required int32 dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dst(), output);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TextMsgPrivate)
}

::google::protobuf::uint8* TextMsgPrivate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TextMsgPrivate)
  // required int32 src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src(), target);
  }

  // required int32 dst = 2;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dst(), target);
  }

  // required string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TextMsgPrivate)
  return target;
}

int TextMsgPrivate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src());
    }

    // required int32 dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst());
    }

    // required string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextMsgPrivate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextMsgPrivate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextMsgPrivate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextMsgPrivate::MergeFrom(const TextMsgPrivate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextMsgPrivate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMsgPrivate::CopyFrom(const TextMsgPrivate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMsgPrivate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TextMsgPrivate::Swap(TextMsgPrivate* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextMsgPrivate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextMsgPrivate_descriptor_;
  metadata.reflection = TextMsgPrivate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TextMsgGroup::kSrcFieldNumber;
const int TextMsgGroup::kDataFieldNumber;
#endif  // !_MSC_VER

TextMsgGroup::TextMsgGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TextMsgGroup)
}

void TextMsgGroup::InitAsDefaultInstance() {
}

TextMsgGroup::TextMsgGroup(const TextMsgGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TextMsgGroup)
}

void TextMsgGroup::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextMsgGroup::~TextMsgGroup() {
  // @@protoc_insertion_point(destructor:TextMsgGroup)
  SharedDtor();
}

void TextMsgGroup::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void TextMsgGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TextMsgGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TextMsgGroup_descriptor_;
}

const TextMsgGroup& TextMsgGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

TextMsgGroup* TextMsgGroup::default_instance_ = NULL;

TextMsgGroup* TextMsgGroup::New() const {
  return new TextMsgGroup;
}

void TextMsgGroup::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    src_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TextMsgGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TextMsgGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 src = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required string data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TextMsgGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TextMsgGroup)
  return false;
#undef DO_
}

void TextMsgGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TextMsgGroup)
  // required int32 src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src(), output);
  }

  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TextMsgGroup)
}

::google::protobuf::uint8* TextMsgGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TextMsgGroup)
  // required int32 src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src(), target);
  }

  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TextMsgGroup)
  return target;
}

int TextMsgGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src());
    }

    // required string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextMsgGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TextMsgGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TextMsgGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TextMsgGroup::MergeFrom(const TextMsgGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TextMsgGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextMsgGroup::CopyFrom(const TextMsgGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextMsgGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TextMsgGroup::Swap(TextMsgGroup* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TextMsgGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TextMsgGroup_descriptor_;
  metadata.reflection = TextMsgGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TcpHeartBeatReq::kDataFieldNumber;
#endif  // !_MSC_VER

TcpHeartBeatReq::TcpHeartBeatReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TcpHeartBeatReq)
}

void TcpHeartBeatReq::InitAsDefaultInstance() {
}

TcpHeartBeatReq::TcpHeartBeatReq(const TcpHeartBeatReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TcpHeartBeatReq)
}

void TcpHeartBeatReq::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcpHeartBeatReq::~TcpHeartBeatReq() {
  // @@protoc_insertion_point(destructor:TcpHeartBeatReq)
  SharedDtor();
}

void TcpHeartBeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TcpHeartBeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TcpHeartBeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TcpHeartBeatReq_descriptor_;
}

const TcpHeartBeatReq& TcpHeartBeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

TcpHeartBeatReq* TcpHeartBeatReq::default_instance_ = NULL;

TcpHeartBeatReq* TcpHeartBeatReq::New() const {
  return new TcpHeartBeatReq;
}

void TcpHeartBeatReq::Clear() {
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TcpHeartBeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TcpHeartBeatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 data = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TcpHeartBeatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TcpHeartBeatReq)
  return false;
#undef DO_
}

void TcpHeartBeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TcpHeartBeatReq)
  // required int32 data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TcpHeartBeatReq)
}

::google::protobuf::uint8* TcpHeartBeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TcpHeartBeatReq)
  // required int32 data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TcpHeartBeatReq)
  return target;
}

int TcpHeartBeatReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpHeartBeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TcpHeartBeatReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TcpHeartBeatReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TcpHeartBeatReq::MergeFrom(const TcpHeartBeatReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TcpHeartBeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcpHeartBeatReq::CopyFrom(const TcpHeartBeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpHeartBeatReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TcpHeartBeatReq::Swap(TcpHeartBeatReq* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TcpHeartBeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TcpHeartBeatReq_descriptor_;
  metadata.reflection = TcpHeartBeatReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TcpHeartBeatRes::kDataFieldNumber;
#endif  // !_MSC_VER

TcpHeartBeatRes::TcpHeartBeatRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TcpHeartBeatRes)
}

void TcpHeartBeatRes::InitAsDefaultInstance() {
}

TcpHeartBeatRes::TcpHeartBeatRes(const TcpHeartBeatRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TcpHeartBeatRes)
}

void TcpHeartBeatRes::SharedCtor() {
  _cached_size_ = 0;
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TcpHeartBeatRes::~TcpHeartBeatRes() {
  // @@protoc_insertion_point(destructor:TcpHeartBeatRes)
  SharedDtor();
}

void TcpHeartBeatRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TcpHeartBeatRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TcpHeartBeatRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TcpHeartBeatRes_descriptor_;
}

const TcpHeartBeatRes& TcpHeartBeatRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TcpProto_2eproto();
  return *default_instance_;
}

TcpHeartBeatRes* TcpHeartBeatRes::default_instance_ = NULL;

TcpHeartBeatRes* TcpHeartBeatRes::New() const {
  return new TcpHeartBeatRes;
}

void TcpHeartBeatRes::Clear() {
  data_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TcpHeartBeatRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TcpHeartBeatRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 data = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TcpHeartBeatRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TcpHeartBeatRes)
  return false;
#undef DO_
}

void TcpHeartBeatRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TcpHeartBeatRes)
  // required int32 data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TcpHeartBeatRes)
}

::google::protobuf::uint8* TcpHeartBeatRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TcpHeartBeatRes)
  // required int32 data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TcpHeartBeatRes)
  return target;
}

int TcpHeartBeatRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TcpHeartBeatRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TcpHeartBeatRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TcpHeartBeatRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TcpHeartBeatRes::MergeFrom(const TcpHeartBeatRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TcpHeartBeatRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TcpHeartBeatRes::CopyFrom(const TcpHeartBeatRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TcpHeartBeatRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TcpHeartBeatRes::Swap(TcpHeartBeatRes* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TcpHeartBeatRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TcpHeartBeatRes_descriptor_;
  metadata.reflection = TcpHeartBeatRes_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
